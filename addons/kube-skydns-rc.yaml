apiVersion: v1
kind: ReplicationController
metadata:
  name: kube-dns-v11
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    version: v11
    kubernetes.io/cluster-service: "true"
spec:
  replicas: ${DNS_REPLICAS}
  selector:
    k8s-app: kube-dns
    version: v11
  template:
    metadata:
      labels:
        k8s-app: kube-dns
        version: v11
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
        -
          command:
            - /usr/local/bin/etcd
            - "-data-dir"
            - /var/etcd/data
            - "-listen-client-urls"
            - "http://127.0.0.1:2379,http://127.0.0.1:4001"
            - "-advertise-client-urls"
            - "http://127.0.0.1:2379,http://127.0.0.1:4001"
            - "-initial-cluster-token"
            - skydns-etcd
          image: "gcr.io/google_containers/etcd-amd64:2.2.1"
          name: etcd
          resources:
            limits:
              cpu: 100m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 50Mi
          volumeMounts:
            -
              mountPath: /var/etcd/data
              name: etcd-storage
        -
          args:
            - "--domain=${DNS_DOMAIN}"
            - "--kube-master-url=${KUBE_API_SERVER_ENDPOINT}"
          image: "gcr.io/google_containers/kube2sky:1.14"
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          name: kube2sky
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 50Mi
        -
          args:
            - "-machines=http://127.0.0.1:4001"
            - "-addr=0.0.0.0:53"
            - "-ns-rotate=false"
            - "-domain=cluster.local."
          image: "gcr.io/google_containers/skydns:2015-10-13-8c72f8c"
          name: skydns
          ports:
            -
              containerPort: 53
              name: dns
              protocol: UDP
            -
              containerPort: 53
              name: dns-tcp
              protocol: TCP
          resources:
            # TODO: Set memory limits when we've profiled the container for large
            # clusters, then set request = limit to keep this container in
            # guaranteed class. Currently, this container falls into the
            # "burstable" category so the kubelet doesn't backoff from restarting it.
            limits:
              cpu: 100m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 50Mi
        -
          args:
            - "-cmd=nslookup kubernetes.default.svc.${DNS_DOMAIN} 127.0.0.1 >/dev/null"
            - "-port=8080"
          image: "gcr.io/google_containers/exechealthz:1.0"
          name: healthz
          ports:
            -
              containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
      dnsPolicy: Default
      volumes:
        -
          emptyDir: {}
          name: etcd-storage
